generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuario {
  id          Int           @id @default(autoincrement())
  nome        String        @db.VarChar(255)
  email       String        @unique @db.VarChar(255)
  senha       String        @db.VarChar(255)
  createdat   DateTime?     @default(now()) @db.Timestamp(6)
  updatedat   DateTime?     @default(now()) @db.Timestamp(6)
  agendamento agendamento[]
}

model sala {
  id          Int           @id @default(autoincrement())
  idtiposala  Int
  nomedasala  String        @unique @db.VarChar(255)
  capacidade  Int           @db.SmallInt
  createdat   DateTime?     @default(now()) @db.Timestamp(6)
  updatedat   DateTime?     @default(now()) @db.Timestamp(6)
  agendamento agendamento[]
  tiposala    tiposala?     @relation(fields: [idtiposala], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model solicitante {
  id                Int             @id @default(autoincrement())
  idtiposolicitante Int
  nome              String          @unique @db.VarChar(255)
  email             String          @unique @db.VarChar(255)
  createdat         DateTime?       @default(now()) @db.Timestamp(6)
  updatedat         DateTime?       @default(now()) @db.Timestamp(6)
  agendamento       agendamento[]
  tiposolicitante   tiposolicitante @relation(fields: [idtiposolicitante], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model agendamento {
  id            Int           @id @default(autoincrement())
  idsala        Int
  idsolicitante Int
  idusuario     Int
  datainicio    DateTime      @db.Date
  datafinal     DateTime      @db.Date
  createdat     DateTime?     @default(now()) @db.Timestamp(6)
  updatedat     DateTime?     @default(now()) @db.Timestamp(6)
  sala          sala          @relation(fields: [idsala], references: [id], onDelete: NoAction, onUpdate: NoAction)
  solicitante   solicitante   @relation(fields: [idsolicitante], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario       usuario       @relation(fields: [idusuario], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recorrencia   recorrencia[]
}

model recorrencia {
  id            Int          @id @default(autoincrement())
  idagendamento Int
  diasemana     Int          @db.SmallInt
  horainicial   DateTime     @db.Time(6)
  horafinal     DateTime     @db.Time(6)
  data          DateTime     @db.Date
  presenca      Boolean      @default(true)
  createdat     DateTime?    @default(now()) @db.Timestamp(6)
  updatedat     DateTime?    @default(now()) @db.Timestamp(6)
  agendamento   agendamento? @relation(fields: [idagendamento], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tiposala {
  id         Int       @id @default(autoincrement())
  nomedotipo String    @unique @db.VarChar(255)
  createdat  DateTime? @default(now()) @db.Timestamp(6)
  updatedat  DateTime? @default(now()) @db.Timestamp(6)
  sala       sala[]
}

model tiposolicitante {
  id          Int           @id @default(autoincrement())
  nomedotipo  String        @db.VarChar(255)
  createdat   DateTime?     @default(now()) @db.Timestamp(6)
  updatedat   DateTime?     @default(now()) @db.Timestamp(6)
  solicitante solicitante[]
}
