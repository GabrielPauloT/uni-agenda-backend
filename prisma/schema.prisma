generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model agendamento {
  id            Int         @id @default(autoincrement())
  idsala        Int
  idsolicitante Int
  idusuario     Int
  diasemana     Int[]       @db.SmallInt
  horainicial   String      @db.VarChar(5)
  horafinal     String      @db.VarChar(5)
  datainicio    DateTime    @db.Date
  datafinal     DateTime    @db.Date
  tema          String      @db.VarChar(75)
  createdat     DateTime?   @default(now()) @db.Timestamp(6)
  updatedat     DateTime?   @default(now()) @db.Timestamp(6)
  sala          sala        @relation(fields: [idsala], references: [id], onDelete: NoAction, onUpdate: NoAction)
  solicitante   solicitante @relation(fields: [idsolicitante], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario       usuario     @relation(fields: [idusuario], references: [id], onDelete: NoAction, onUpdate: NoAction)
  falta         falta[]
}

model falta {
  id            Int          @id @default(autoincrement())
  idagendamento Int?
  data          DateTime?    @db.Date
  createdat     DateTime?    @default(now()) @db.Timestamp(6)
  updatedat     DateTime?    @default(now()) @db.Timestamp(6)
  agendamento   agendamento? @relation(fields: [idagendamento], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model sala {
  id          Int           @id @default(autoincrement())
  idtiposala  Int?
  nomedasala  String        @db.VarChar(255)
  capacidade  Int?          @db.SmallInt
  createdat   DateTime?     @default(now()) @db.Timestamp(6)
  updatedat   DateTime?     @default(now()) @db.Timestamp(6)
  agendamento agendamento[]
  tiposala    tiposala?     @relation(fields: [idtiposala], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model solicitante {
  id                Int              @id @default(autoincrement())
  idtiposolicitante Int?
  nome              String           @db.VarChar(255)
  email             String           @db.VarChar(255)
  createdat         DateTime?        @default(now()) @db.Timestamp(6)
  updatedat         DateTime?        @default(now()) @db.Timestamp(6)
  agendamento       agendamento[]
  tiposolicitante   tiposolicitante? @relation(fields: [idtiposolicitante], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tiposala {
  id         Int       @id @default(autoincrement())
  nomedotipo String    @db.VarChar(255)
  createdat  DateTime? @default(now()) @db.Timestamp(6)
  updatedat  DateTime? @default(now()) @db.Timestamp(6)
  sala       sala[]
}

model tiposolicitante {
  id          Int           @id @default(autoincrement())
  nomedotipo  String        @db.VarChar(255)
  createdat   DateTime?     @default(now()) @db.Timestamp(6)
  updatedat   DateTime?     @default(now()) @db.Timestamp(6)
  solicitante solicitante[]
}

model usuario {
  id          Int           @id @default(autoincrement())
  nome        String        @db.VarChar(255)
  email       String        @unique @db.VarChar(255)
  senha       String        @db.VarChar(255)
  createdat   DateTime?     @default(now()) @db.Timestamp(6)
  updatedat   DateTime?     @default(now()) @db.Timestamp(6)
  agendamento agendamento[]
}
